[ { "title": "m1 pro &amp; max JAVA JDK 환경설정", "url": "/posts/JAVA%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/", "categories": "환경설정", "tags": "환경설정", "date": "2022-01-25 00:00:00 +0900", "snippet": "m1 pro &amp;amp; max JAVA JDK 환경설정 1.JAVA 설치하기 2.JAVA가 설치 된 곳 확인하기 3.환경변수 설정 4.확인1.JAVA 설치하기brew install --cask adoptopenjdk11홈브류에서 cask가 설치가 안되어 있을 때brew install cask 2.JAVA가 설치 된 곳 확인하기터미널에서 cd 또는 ls를 사용하여 home까지 찾는다.대부분 이 주소를 따릅니다./Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Conten..." }, { "title": "자료구조 트리의 종류", "url": "/posts/%ED%8A%B8%EB%A6%AC%EC%9D%98%EC%A2%85%EB%A5%98/", "categories": "자료구조", "tags": "S자료구조, 트리", "date": "2022-01-25 00:00:00 +0900", "snippet": "트리의 종류 정 이진 트리 포화 이진 트리 완전 이진 트리정 이진 트리 정 이진트리는 잎새노드를 제외한 모든 노드가 자식 노드를 2개 또는 0개를 가진다.포화 이진 트리 정 이진 트리이면서 완전 이진 트리인 경우입니다. 모든 리프 노드의 레벨이 동일하고, 모든 레벨이 가득 채워져 있는 완벽한 피라미드 구조를 가지고 있습니다. 모든 내부 노드가 두 개의 자식 노드를 가진다. 모든 말단 노드가 동일한 깊이 또는 레벨을 갖는다.완전 이진 트리 완전 이진 트리는 마지막 레벨을 제외한 모든 레벨에서 노드들이 꽉 채워진 이..." }, { "title": "자료구조 트리 순회 정리", "url": "/posts/%ED%8A%B8%EB%A6%AC%EC%88%9C%ED%9A%8C%EC%A0%95%EB%A6%AC/", "categories": "자료구조", "tags": "자료구조, 트리", "date": "2022-01-25 00:00:00 +0900", "snippet": "자료구조 트리 순회 정리 이진 트리 순회 전위 순회 중위 순회 후위 순회이진 트리 순회 이진 트리에 있는 모드 노드들을 한번씩 모두 방문하요 노드가 가지고 있는 데이터를 처리하는 것을 순회라고 합니다. 리스트나 스택, 큐와 같은 선형 자료구조는 순회하는 방법이 한 가지였지만, 트리는 계층적인 구조를 가지고 있기 때문에 여러가지 순회 방법이 있습니다. 그리고 각 노드들을 순회할 때는 재귀적으로 반복하게 됩니다.전위 순회 전위 순회는 현재 노드를 방문하는 D작업을 가장 먼저 수행하여 DLR순서로 순회하는 방법입니다. ..." }, { "title": "자료구조 트리 개념", "url": "/posts/%ED%8A%B8%EB%A6%AC%EA%B8%B0%EC%B4%88/", "categories": "자료구조", "tags": "자료구조, 트리", "date": "2022-01-25 00:00:00 +0900", "snippet": "트리 트리의 개념 트리의 용어 정리 트리의 특징트리의 개념 트리는 노드로 이루어진 자료 구조 트리는 하나의 루트 노드를 갖는다. 루트 노드는 0개 이상의 자식 노드를 갖고 있다. 그 자식 노드 또한 0개 이상의 자식 노드를 갖고 있고, 이는 반복적으로 정의된다. 노드(node)들과 노드들을 연결하는 간선(edge)들로 구성되어 있다. 트리에는 사이클(cycle)이 존재할 수 없다. 노드들은 특정 순서로 나열될 수도 있고 그럴 수 없을 수도 있다. 각각의 노드는 부모 노드로의 연결이 있을 수도 있고 없을 수도 있..." }, { "title": "SQL 트랜잭션", "url": "/posts/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/", "categories": "SQL", "tags": "SQL, 면접질문, 트랜잭션", "date": "2021-12-22 00:00:00 +0900", "snippet": "트랜잭션(Transaction) 트랜잭션 이란? 트랜잭션의 특징 트랜잭션의 ACID Atomicity(원자성) Consistency(일관성) Isolation(고립성) Durability(지속성) 트랜잭션의 연산 및 상태 Commit 연산 Rollback 연산 트랜잭션 이란? 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들을 의미한다.트랜잭션의 특징 ..." }, { "title": "SQL 면접 질문 정리", "url": "/posts/DB%EB%A9%B4%EC%A0%91%EC%A7%88%EB%AC%B8%EC%A0%95%EB%A6%AC/", "categories": "SQL", "tags": "SQL, 면접질문", "date": "2021-12-22 00:00:00 +0900", "snippet": "SQL 면접 질문 정리 데이터베이스 쿼리문 순서 데이터 베이스 언어 스키마(Schema) RDBMS vs NOSQL Join(조인)의 정의와 종류 DROP, Truncate, delete 차이점 데이터베이스에서 다양한 유형의 관계데이터베이스 여러 사람에 의해 공유되어 사용될 목적으로 통합하여 관리되는 데이터의 집합을 말한다.쿼리문 순서 SELECT -&amp;gt; FROM -&amp;gt; WHERE -&amp;gt; GROUP BY -&amp;gt; ORDER BY데이터 베이스 언어 데이터 베이스 언어에..." }, { "title": "SQL 제약 조건 문법 ", "url": "/posts/SQL%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B46/", "categories": "SQL", "tags": "SQL, ON DELETE, CASCADE, ON UPDATE", "date": "2021-12-21 00:00:00 +0900", "snippet": "SQL 면접 질문 정리 ON DELETE, ON UPDATEON DELETE, ON UPDATEFOREIGN KEY 제약 조건에 의해 참조되는 테이블에서 데이터의 수정이나 삭제가 발생하면 참조 하고 있는 테이블의 데이터도 같이 영향을 받습니다. 참조하고 있는 테이블의 동작은 다음 키워드를 사용해 FOREIGN KEY 제약 조건에서 미리 설정 할 수 있습니다. ON DELETE 참조되는 테이블의 값이 삭제될 경우 동작은 ON DELETE 문법으로 설정 할 수 있습니다. ON UPDATE ..." }, { "title": "SQL 제약조건 - DEFAULT", "url": "/posts/SQL%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B45/", "categories": "SQL", "tags": "SQL, 제약조건, DEFAULT", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 제약조건 DEFAULT DEFAULT CREATE 문법으로 DEFAULT 설정 ALTER 문법으로 DEFAULT 설정DEFAULT DEFAULT 제약 조건은 필드의 기본값을 설정 할 수 있게 해줍니다. 레코드를 입력할 때 해당 필드 값을 전달 하지 않으면 자동으로 설정된 기본 값을 저장 합니다.CREATE 문법으로 DEFAULT 설정 CREATE 문으로 테이블을 생성 할 때 해당 필드의 타입 뒤에 DEFAULT를 명시하면 해당 필드의 기본값을 설정 할 수 있습니다.예시CREATE TABLE 테이블이름( 필..." }, { "title": "SQL 제약조건 - FK", "url": "/posts/SQL%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B44/", "categories": "SQL", "tags": "SQL, 제약조건, FOREIGN KEY", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 제약조건 FOREIGN KEY FOREIGN KEY CREATE 문법으로 FOREIGN KEY 설정 ALTER 문으로 FOREIGN KEY 설정FOREIGN KEY 제약 조건을 설정한 필드는 외래 키 라고 부르며 한 테이블을 다른 테이블과 연결 시켜주는 역할을 합니다. 외래키가 설정된 테이블에 레코드를 입력하면 기준이 되는 테이블의 내용을 참조해서 레코드가 입력됩니다. FOREIGN KEY 제약 조건은 하나의 테이블을 다른 테이블에 의존하게 만듭니다. FK 제약 조건을 설정 할 때 참조되는 테이블의 필드는 반..." }, { "title": "SQL 제약조건 - PK", "url": "/posts/SQL%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B43/", "categories": "SQL", "tags": "SQL, 제약조건, PRIMARY KEY", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 제약조건 PRIMARY KEY PRIMARY KEY CREATE 문법으로 PRIMARY KEY 설정 ALTER 문법으로 PRIMAY KEY 설정PRIMARY KEY 해당 필드는 NOT NULL과 UNIQUE 제약 조건의 특징을 모두 가집니다. 이 제약 조건이 설정된 필드는 NULL, 값을 가질 수 없으며 또한 중복된 값을 가져서도 안됩니다. 이러한 PRIMARY KEY 제약 조건을 기본 키 라고 합니다. UNIQUE는 한 테이블의 여러 필드에 설정할 수 있지만 PRIMARY KEY는 테이블당 오직 하나의 필드에..." }, { "title": "SQL 제약조건 - UNIQUE", "url": "/posts/SQL%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B42/", "categories": "SQL", "tags": "SQL, 제약조건, UNIQUE", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 제약조건 UNIQUE UNIQUE CREATE 문으로 UNIQUE 설정 ALTER 문으로 UNIQUE 설정UNIQUE UNIQUE 제약 조건을 설정하면 해당 필드는 서로 다른 값을 가져야 합니다. UNIQUE 조건이 설정된 필드는 중복된 값을 저장 할 수 없습니다.-UNIQUE 제약 조건은 CREATE 문으로 테이블을 생성할 때나, 나중에 ALTER 문으로 추가할 수도 있습니다.CREATE 문으로 UNIQUE 설정사용 예시1. CREATE TABLE 테이블이름 ( 필드명 필드타입 UNIQUE,)2. CREA..." }, { "title": "SQL 제약조건 - NOT NULL", "url": "/posts/SQL%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4/", "categories": "SQL", "tags": "SQL, 제약조건, NOTNULL", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 제약조건 NOTNULL 제약 조건 NOT NULL CREATE 문으로 NOT NULL 설정 ALTER 문으로 NOT NULL 설정제약 조건 데이터의 무결성을 지키기 위해 데이터를 입력받을 때 실행되는 검사 규칙을 의미합니다. 제약 조건은 CREATE 문법으로 테이블을 생성할 때나 ALTER 문법으로 필드를 추가할 때도 설정 할 수도 있습니다. MYSQL에서 사용할 수 있는 제약조건은 5가지 입니다.NOT NULL NOT NULL 제약 조건을 설정하면 해당 필드는 NULL 값을 저장할 수 없습니다. 즉, 이..." }, { "title": "SQL 기초 예제-3", "url": "/posts/sql-%EA%B8%B0%EC%B4%883/", "categories": "SQL", "tags": "SQL, 기초문법", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 예제-3 대소문자 변환 함수(UPPER, LOWER, INITCAP) 문자에서 특정 철자 추출 문자열의 길이를 출력하기 문자에서 특정 철자의 위치 출력(INSTR) 특정 철자를 다른 철자로 변경(REPLACE) 특정 철자를 N개 만큼 채우기(LPAD, RPAD) 특정 철자 잘라내기(TRIM, RTRIM, LTRIM)대소문자 변환 함수(UPPER, LOWER, INITCAP) 사원 테이블에서 첫 번째 컬럼은 대문자, 두 번째 컬럼은 소문자, 세 번째 컬럼은 이름의 첫 번째 첫자만 대문자로 나머지는 소문..." }, { "title": "SQL 기초 예제-2", "url": "/posts/sql-%EA%B8%B0%EC%B4%882/", "categories": "SQL", "tags": "SQL, 기초문법", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 예제-2 비교 연산자 배우기(BETWEEN AND)-1 출력 결과 비교 연산자 배우기(BETWEEN AND)-2 출력 결과 비교 연산자 배우기(LIKE) 출력 결과 비교 연산자 배우기(IS NULL) 출력 결과 비교 연산자 배우기(IN) 출력 결과 논리 연산자 배우기(AND) 출력 결과 AND 연산자 연산표 OR 연산자 연산표 NOT 연산자..." }, { "title": "SQL 기초 예제-1", "url": "/posts/sql-%EA%B8%B0%EC%B4%881/", "categories": "SQL", "tags": "SQL, 기초문법", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 예제-1 테이블에서 특정 열(COLUMN) 선택하기 출력 결과 테이블에서 모든 열(COLUMN) 출력하기 출력 결과 컬럼 별칭을 사용하여 출력되는 컬럼명 변경하기 출력 결과 연결 연산자 사용하기 - 1 출력 결과 연결 연산자 사용하기- 2 출력 결과 중복된 데이터를 제거해서 출력하기(DISTINCT) 출력 결과 데이터를 정렬해서 출력하기(ORD..." }, { "title": "SQL 기본 문법 - UPDATE ", "url": "/posts/SQL-UPDATE/", "categories": "SQL", "tags": "SQL, 기본문법, UPDATE", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 문법 UPDATEUPDATE UPDATE 문법을 사용하여 레코드의 내용을 수정 할 수 있습니다.예시UPDATE 테이블이름SET 필드이름1 = 데이터값1, 필드이름2 = 데이터값2, ....WHERE 필드이름=데이터값 UPDATE 문법은 해당 테이블에서 WHERE 절의 조건을 만족하는 레코드값만 수정합니다.예제 Test 테이블에서 Name 필드의 값이 ‘kdw’인 모든 레코드의 RoomName 값을 1803으로 변경하는 예제입니다.UPDATE TestSET RoomName = 1803WHERE Name = &..." }, { "title": "SQL 기본 문법 - SELECT ", "url": "/posts/SQL-SELECT/", "categories": "SQL", "tags": "SQL, 기본문법, SELECT", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 문법 SELECT 테이블의 모든 필드 선택 특정 조건의 레코드 선택 특정 필드만 선택 중복되는 값 제거SELECT SELECT 문법을 사용하여 테이블의 레코드를 선택할 수 있습니다.예시SELECT 필드이름FROM 테이블이름WHERE 조건 FROM 절은 레코드를 선택할 테이블의 이름을 명시합니다. WHERE 절을 사용하면 선택할 레코드의 조건을 상세하게 설정할 수 있습니다.테이블의 모든 필드 선택 SELECT 문법과 함께 * 기호를 사용하면 해당 테이블의 모든 필드를 선택할 수 있습니다.예시SELEC..." }, { "title": "SQL 기본 문법 - INSERT ", "url": "/posts/SQL-INSERT/", "categories": "SQL", "tags": "SQL, 기본문법, INSERT", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 문법 INSERT 테이블에 레코드 추가INSERT INSERT INTO 문법을 사용하여 테이블에 새로운 레코드를 추가할 수 있습니다.테이블에 레코드 추가 INSERT INTO 문법과 함께 VALUES절을 사용하여 해당 테이블에 새로운 레코드를 추가할 수 있습니다.예시1. INSERT INTO 테이블이름(필드이름1, 필드이름2, ...) VALUES (데이터값1, 데이터값2, ...)2. INSERT INTO 테이블이름 VALUES (데이터값1, 데이터값2, ...)두 번째 문법처럼 필드의 이름을 생략..." }, { "title": "SQL 기본 문법 - DROP, TRUNCATE ", "url": "/posts/SQL-DROP/", "categories": "SQL", "tags": "SQL, 기본문법, DROP, TRUNCATE", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 문법 DROP 데이터베이스 삭제 테이블 삭제 TRUNCATEDROP DROP 문법을 사용하여 데이터베이스와 테이블을 삭제 할 수 있습니다.데이터베이스 삭제 DROP DATABASE 문법은 해당 데이터 베이스를 삭제합니다.예시DROP DATABASE 데이터베이스이름예제 Test 데이터베이스를 삭제하는 예제입니다.DROP DATABASE Test데이터베이스를 삭제하면 해당 데이터베이스의 모든 테이블과 데이터가 삭제 됩니다.테이블 삭제 DROP TABLE 문법은 해당 테이블을 삭제합니다.예시DROP TAB..." }, { "title": "SQL 기본 문법 - DELETE ", "url": "/posts/SQL-DELETE/", "categories": "SQL", "tags": "SQL, 기본문법, DELETE", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 문법 DELETEDELETE DELETE 문법을 사용하여 테이블의 레코드값을 삭제 할 수 있습니다.예시DELETE FROM 테이블이름WHERE 필드이름 = 데이터값 DELETE 문법은 WHERE 절의 조건을 만족하는 레코드값을 삭제합니다 만약 WHERE절을 생략하면 해당 테이블에 저장된 모든 데이터가 삭제 됩니다.예시DELETE FROM 테이블 이름 테이블에 저장된 모든 데이터가 삭제되어도 테이블은 여전히 남아 있기 때문에 해당 테이블 까지 삭제 하고 싶을 때는 DROP TABLE 문법을 사용하면 됩니다...." }, { "title": "SQL 기본 문법 - CREATE ", "url": "/posts/SQL-CREATE/", "categories": "SQL", "tags": "SQL, 기본문법, CREATE", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기초 문법 CREATE 1. 데이터 베이스 생성 2. 테이블 생성 CREATE CREATE 문법을 사용하여 데이터베이스와 테이블을 생성할 수 있습니다.1. 데이터 베이스 생성CREATE DATABASE 데이터베이스이름CREATE DATABASE Test;2. 테이블 생성 데이터 베이스는 하나 이상의 테이블로 구성이 됩니다. 테이블에 데이터를 저장하여 관리를 할 수가 있으며 CREATE TABLE 문법을 사용해 테이블을 생성할 수 있습니다.예시CREATE TABLE 테이블이름( ..." }, { "title": "SQL 기본 문법 - ALTER ", "url": "/posts/SQL-ALTER/", "categories": "SQL", "tags": "SQL, 기본문법, ALTER", "date": "2021-12-11 00:00:00 +0900", "snippet": "SQL 기본 문법 ALTER 1. 데이터베이스 수정 2. 테이블 수정 2-1 새로운 필드 추가 2-2 기존 필드 삭제 필드 타입 변경 ALTER ALTER 문법을 사용하여 데이터베이스와 테이블의 내용을 수정 할 수 있습니다.1. 데이터베이스 수정예시1. ALTER DATABASE 데이터베이스이름 CHARACTER SET=문자집합이름2. ALTER DATABASE 데이터베이스이름 COLLATE=콜레이션이름 콜레이션(collation) : 데이터베이스의 검색이나 정렬과 같은 작업..." }, { "title": "Node Express Module", "url": "/posts/NodeExpress/", "categories": "Node", "tags": "Node, Express", "date": "2021-12-10 00:00:00 +0900", "snippet": "Express 꼭 알아둘 개념! 기본 서버 설정 기본 응답 메소드 send() 메소드를 사용한 JSON 전달 기본 요청 메소드 요청 헤더의 속성 추출 router 미들웨어 app 객체의 메소드 router 미들웨어 예시 router 모듈화 cookie parser 미들웨어 쿠키의 메소드 옵션 속성 express-session 미들웨어 session() 메소드의 옵션 session 메소드의 매개변수 메소드 s..." }, { "title": "DOM 과 BOM 차이", "url": "/posts/DOMBOM%EC%B0%A8%EC%9D%B4/", "categories": "JS", "tags": "JS, 기초, 생성자 함수", "date": "2021-12-10 00:00:00 +0900", "snippet": "DOM 과 BOM 차이 BOM(Browser Object Model) 이란? 자주 사용하는 Browser 내장 객체 DOM(Document Object Model) 이란? 자주 사용하는 Document 내장 객체 DOM과 BOM 차이BOM(Browser Object Model) 이란? Web Browser와 관련된 객체의 집합 Web Browser 기능 요소를 직접 제어할 수 있는 객체 모음 객체의 모델의 종류 : window(location,navigator, ..." }, { "title": "async &amp; await", "url": "/posts/async,await/", "categories": "JS, 기초문법", "tags": "JS, Promise", "date": "2021-12-03 19:00:00 +0900", "snippet": "async &amp;amp; await async &amp;amp; await async &amp;amp; await 기본문법 async &amp;amp; await 예제async &amp;amp; await async &amp;amp; await 은 자바스크립트 비동기 처리 패턴중 가장 최근에 나온 문법입니다. 기존에 비동기 처리 방식인 콜백 함수와 프로미스의 단점을 보완하고 개발자가 읽기 좋은 코드로 작성할 수 있게 도와 줍니다.async &amp;amp; await 기본문법async function 함수이름(){..." }, { "title": "REACT Side Effect(부수효과)", "url": "/posts/REACT-5/", "categories": "REACT", "tags": "REACT, Side Effect(부수효과)", "date": "2021-12-03 00:00:00 +0900", "snippet": "REACT Side Effect(부수효과) Side Effect(부수효과) 예시 1 Pure Function(순수 함수) 예시 2 Side Effect(부수효과) 함수 내에서 어떠한 구현이 함수 외부에 영향을 끼치는 경우 해당 함수는 Side Effect가 있다고 합니다.예시 1let foo = &#39;hello&#39;function bar(){ foo = &#39;world&#39;}bar(); &amp;lt;-- bar는 Side Effect를 발생 시킵니다..." }, { "title": "REACT 상태 끌어올리기(LiftingStateUp)", "url": "/posts/REACT-4/", "categories": "REACT", "tags": "REACT, LiftingStateUp", "date": "2021-12-03 00:00:00 +0900", "snippet": "REACT 상태 끌어올리기(LiftingStateUp) 상태 끌어올리기(LiftingStateUp) 예시 상태 끌어올리기(LiftingStateUp)단방향 데이터 흐름이라는 원칙에 따라서 하위 컴포넌트는 상위 컴포넌트로 전달 받은 데이터의 형태, 타입이 무엇인지만 알 수 있고 데이터가 state, 하드코딩으로 입력된 내용인지도 알지 못합니다.그러므로 하위 컴포넌트에서의 어떤 이벤트로 인해 상위 컴포넌트의 상태가 바뀌는 것은 마치 역방향 데이터 흐름으로 들릴 수 있습니다.상태 끌어올리기 라는 것은 상위..." }, { "title": "REACT useEffect", "url": "/posts/REACT-3/", "categories": "REACT", "tags": "REACT, useEffect", "date": "2021-12-03 00:00:00 +0900", "snippet": "REACT useEffect useEffect 예시 예시 설명 언제 실행 되나요? Hook을 쓸 때 주의 할점 조건부 effect 발생 (dependency array) 단 한번만 실행되는 Effect 함수 1. 빈 배열 넣기 2. 아무것도 넣지 않기(기본 형태) useEffect 컴포넌트 내에서 side Effect를 실행 할 수 있게 하는 Hooks 입니다.예시import React, { useState, useEffect } fro..." }, { "title": "REACT Props", "url": "/posts/REACT-2/", "categories": "REACT, Props", "tags": "REACT, Props", "date": "2021-12-03 00:00:00 +0900", "snippet": "REACT Props Props란? Props의 기본 사용법 여러개의 props, 비구조화 할당 props.childrenProps란? props는 컴포넌트 속성을 설정할 때 사용됩니다. props 값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트에서 설정할 수 있습니다. props는 상위 컴포넌트에서 하위 컴포넌트로 전달하는 개념이며, 하위 컴포넌트에서 상위 컴포넌트에 값을 전달 할 수 없습니다. Props의 기본 사용법App 컴포넌트에서 Hello 컴포넌트를 사용할 때 name 이라는 값을 ..." }, { "title": "REACT JSX", "url": "/posts/REACT-1/", "categories": "REACT, JSX", "tags": "REACT, JSX", "date": "2021-12-03 00:00:00 +0900", "snippet": "REACT JSX JSX 란? JSX 장점 JSX 문법 규칙 JS 표현 IF문 대신 조건부 연산자 AND 연산자( &amp;amp;&amp;amp; )를 사용한 조건부 렌더링 undefined를 렌더링 하지 않기 인라인 스타일링 class 대신 className 태그는 꼭 닫아야 합니다. 주석 JSX 란? JSX는 자바스크립트의 확장 문법이며 XML과 비슷하게 생겼습니다. JSX로 작성된 코드는 실행되기 전 코드가 번들링 되는 과정..." }, { "title": "SSR과 CSR의 차이", "url": "/posts/SSR-CSR/", "categories": "기술면접", "tags": "WEB, SSR, CSR, 기술면접", "date": "2021-12-03 00:00:00 +0900", "snippet": "SSR과 CSR 차이 SSR의 정의 ServerSide Rendering CSR의 정의 Client Side Rendering SSR과 CSR의 차이 웹페이지를 로딩하는 시간 SEO 대응 서버 자원 사용 사용 권장 예시 SSR을 사용할 때 CSR을 사용 할 때 SSR의 정의ServerSide Rendering 서버쪽에서 렌더링 준비를 끝 마친 상태로 클라이언트에 전달하는 방식이다. 사용..." }, { "title": "PWA (Progressive Web App)", "url": "/posts/PWA/", "categories": "기술면접", "tags": "WEB, PWA, 기술면접", "date": "2021-12-03 00:00:00 +0900", "snippet": "PWA (Progressive Web App) 웹의 장점과 앱의 장점을 결합한 환경입니다. 앱 수준과 같은 사용자 경험을 웹에서 제공하는 것이 목적입니다.특징확장성이 좋고, 깊이 있는 앱같은 웹을 만드는 것을 지향합니다.웹 주소만 있다면 누구나 접근 하여 사용이 가능하고 스마트폰의 저장공간을 잡아 먹지 않습니다.또 네트워크 환경이 좋지 않아도 빠르게 구동이 되며 앱 사용자 에게 푸시 알림을 보낼 수도 있습니다.PWA 제공 기능 프로그래시브 : 점진적 개선을 통해 작성되며 어떤 브라우저든 상관 없이 모든 사용자에게 적합합니..." }, { "title": "고차함수", "url": "/posts/%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98/", "categories": "JS", "tags": "고차함수", "date": "2021-12-03 00:00:00 +0900", "snippet": "고차 함수 고차 함수란? Array.Map(callback (element, index, array), thisArg) Array.filter(callback (element, index, array), thisArg) Array.reduce( callback( accumulator, currentValue, index, array ), initialValue )고차 함수란?함수를 인자로 전달 받거나 결과로 반환하는 함수를 말합니다. 쉽게 말해 함수를 인자로 받아 대신 실행하는 함수를 말하는 것 입니다. 자바스크립트 함..." }, { "title": "화살표 함수", "url": "/posts/%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98/", "categories": "JS, 기초문법", "tags": "JS, 함수, 화살표함수", "date": "2021-12-03 00:00:00 +0900", "snippet": "ES6에서 기존 함수를 간결하게 표현 할 수 있고 기능이 개선된 화살표 함수가 추가 되었습니다.화살표 함수는 function 키워드를 사용하지 않고 =&amp;gt; 모양의 연산자를 사용해 정의합니다. 매개변수가 하나일 경우 인자를 정의 할 때 괄호()를 생략할 수 있습니다. 매개변수가 없거나 둘 이상일 경우 괄호를 작성해야 합니다. 코드블록을 지정하지 않고 한 문장에서 작성 시 별도의 return 문을 사용하지 않아도 됩니다. 코드블록을 지정했을 경우 반환 하고자 하는 값에서 return 문을 작성해야 합니다.cons..." }, { "title": "Promise - 2", "url": "/posts/promse2/", "categories": "JS, 기초문법", "tags": "JS, Promise", "date": "2021-12-03 00:00:00 +0900", "snippet": "프로미스 프로미스 예제 2프로미스 예제 2function doJob(name, person){ return new Promise(resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt;{ if(person.hp &amp;gt; 50){ resolve({ result : `${name} success`, loss : 30 }) ..." }, { "title": "Promise - 1", "url": "/posts/promse1/", "categories": "JS, 기초문법", "tags": "JS, Promise", "date": "2021-12-03 00:00:00 +0900", "snippet": "프로미스 프로미스(Promise) 프로미스(Promise) 생성 프로미스(Promise) 예제프로미스(Promise) 자바스크립트는 비통기 처리를 위한 하나의 패턴으로 콜백함수를 사용합니다. 콜백 배턴은 콜백 지옥으로 인해 가독성이 나쁘고 비동기 처리 중 발생한 에러의 처리가 곤란하여여러 개의 비동기 처리를 한번에 처리하는 데도 한계가 있습니다. ES6에서 새로 추가된 비동기 처리를 위한 프로미스를 도입했습니다. 프로미스는 콜백 배턴이 가진 단점을 보완하여 비동기 처리 시점을 명확하게 표현 할 수 있는 장점이 있습..." }, { "title": "자료형 확인하기", "url": "/posts/%EC%9E%90%EB%A3%8C%ED%98%95%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/", "categories": "JS, 기초문법", "tags": "JS, 기초문법, 자료형 확인", "date": "2021-12-03 00:00:00 +0900", "snippet": "자료형 확인하기 type of instance of 정리자바스크립트에서 자료형을 확인하는 방법은 다양하게 있습니다.그중에서 많이 사용되는 typeof, instanceof를 어떻게 사용하는지 알아보겠습니다.type oflet str = &#39;javascript&#39;let strObj = new String(&#39;JavaScript&#39;);let num = 100;let numObj = new Number(200);let isTrue = true;let isFalse = new Boolean(false);co..." }, { "title": "자바스크립트 this", "url": "/posts/JS03-THIS/", "categories": "JS", "tags": "JS, 기초, this", "date": "2021-12-01 00:00:00 +0900", "snippet": "1. this는 함수가 어떻게 호출되는지에 따라 동적으로 결정됩니다.2. this의 주요 목적은 작성된 코드를 재사용하기 위해 존재하는데, 호출되는 방식에 따라 동적으로 결정되어 잘못된 로직을 작성할 수 있습니다.3. this는 전역에서 사용할 수 있으며 함수 안에서도 사용할 수 있습니다.4. 함수는 객체 안에 메소드로 정의, 생성자 함수로 사용, 특정 로직을 계산하여 값을 반환, 여러목적으로 사용할 수 있습니다.this.valueA = &#39;a&#39; console.log(valueA) &amp;lt;-- 실행결과 av..." }, { "title": "자바스크립트 클래스 상속", "url": "/posts/JS02-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%83%81%EC%86%8D/", "categories": "JS", "tags": "JS, 기초, 클래스상속", "date": "2021-12-01 00:00:00 +0900", "snippet": "class Chart { constructor(width, height){ this.width = width; this.height = height; } drawLine(){ console.log(&#39;draw line&#39;) }}class barChart extends Chart{ constructor(width, height){ super(width, height) } draw(){ this.drawLine() ..." }, { "title": "자바스크립트 클래스 정의하기", "url": "/posts/JS01-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%A0%95%EC%9D%98/", "categories": "JS", "tags": "JS, 기초, 클래스", "date": "2021-12-01 00:00:00 +0900", "snippet": "클래스는 별도 타입의 객체를 생성하는 설계 도면이라 볼 수 있습니다.예를 들어 붕어빵 틀은 붕어빵을 만들기 위한 틀이라고 볼 수 있는데여기서 붕어빵은 객체이고 붕어빵 틀이 클래스라고 볼 수 있습니다.클래스를 통해 객체가 가져야 할 상태와 행위들을 속성과 메소드로 정의 할 수 있습니다.클래스에서 만들어진 객체들을 인스턴스 라고 합니다.class Cart{ constructor(){ this.store = {}; }}addProuct(product){ this.store[product.id] = pro..." }, { "title": "자바스크립트 프로토타입 기반 상속", "url": "/posts/JS%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/", "categories": "JS", "tags": "JS, 기초, 기술면접, 프로토타입", "date": "2021-11-30 00:00:00 +0900", "snippet": " 자바스크립트에서 생성자 함수로 만들어진 객체는 그 생성자 함수의프로토타입(Prototype) 객체를 상속 합니다. 모든 인스턴스는 해당 생성자 함수의 프로토타입 객체의 속성과 메소드를 사용 할 수 있습니다. 자바스크립트에서 모든 함수는 Prototype 속성으로 프로토타입 객체를 가집니다. 모든 객체는 proto 속성을 가지고 있는데 proto 속성은 해당 객체를 생성한 생성자 함수의 prototype 객체를 가리키고 있으므로 생성자 함수를 통해 타입을 정의 할 수 있습니다.// Storage 생성자 함수를 정의하고 ..." }, { "title": "자바스크립트 생성자 함수", "url": "/posts/JS%EC%83%9D%EC%84%B1%EC%9E%90%ED%95%A8%EC%88%98/", "categories": "JS", "tags": "JS, 기초, 생성자 함수", "date": "2021-11-30 00:00:00 +0900", "snippet": "자바스크립트 함수는 재사용 가능하내 코드의 묶음으로 사용하는 것 외에 객체를 생성하기 위한 방법으로도 사용됩니다. 객체를 생성하기 위해 직접적으로 객체를 반환해도 되지만new 키워드를 사용하여 함수를 호출하게 되면 return 문이 없어도 새로운 객체가 반환 됩니다.이렇게 객체를 생성하는 역할을 하는 함수를 생성자 함수라고 합니다.생성자 함수는 new 키워드를 사용하지 않으면 일반적인 함수와 동일하게 작동하기 때문에새로운 객체를 반환하지 않습니다. 그렇기 때문에 함수명을 대문자로 시작하는 관례를 가지고 있습니다.function..." }, { "title": "자바스크립트 객체지향", "url": "/posts/JS%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/", "categories": "JS", "tags": "JS, 기초, 객체지향", "date": "2021-11-30 00:00:00 +0900", "snippet": "객체지향 프로그래밍이란 프로그램을 객체들로 구성하고 객체들 간에 서로 상호작용 하도록 작성하는 방법입니다. 객체지향에서 객체란 식별 가능한 구체적인 사물 또는 추상적인 개념이라고 정의합니다. 그리고 객체는 특징적인 행동과 변경 가능한 상태를 가지고 있습니다.자바스크립트에서 함수 값으로 가지는 속성을 메소드라고 하며 이 메소드를 특징적인 행동 이며그 외에 다른 값들은 변경 가능한 상태라 볼 수 있습니다./*teacherKim을 객체로 표현합니다.이름과 나이를 속성으로 가지고 있고자바스크립트를 가르치는 함수를 가지고 있습니다. t..." }, { "title": "자바스크립트 JS 객체 메소드 정리", "url": "/posts/JS%EA%B0%9D%EC%B2%B4%EB%A9%94%EC%86%8C%EB%93%9C/", "categories": "JS, 객체 메소드", "tags": "JS, 기초, 객체 메소드", "date": "2021-11-30 00:00:00 +0900", "snippet": "JS 객체 메소드 정리!! 객체에서 키만 추출하기(keys) 객체에서 값만 추출하기(values) 객체를 배열로 변환하기(entries) 객체 병합 확장하기(assign)객체에서 키만 추출하기(keys) Object 객체의 메소드 keys를 활용하면 객체의 키(key)들만 추출할 수 있습니다. 추출한 키들은 배열에 담아 반환합니다.const obj = { moive : &quot;Sunny&quot;, music : &quot;Like Sugar&quot;, style : &quot;retro&quot;,}con..." }, { "title": "자바스크립트 JS Math 메소드 정리", "url": "/posts/JS-Math%EB%A9%94%EC%86%8C%EB%93%9C/", "categories": "JS, Math 메소드", "tags": "JS, 기초, Math 메소드", "date": "2021-11-30 00:00:00 +0900", "snippet": "JS Math 메소드 정리!! 절대값 반환하기 (sqrt) 특정 자리수에서 반올림하기(round) 특정 자리수에서 올림하기(ceil) 특정 자리수에서 내림하기(floor) 랜덤값 구하기(random) 작은 값을 반환하기(min) 큰 값을 반환하기(max)절대값 반환하기 (sqrt) Math.sqrt() 함수는 숫자의 제곱근을 반환합니다.console.log(Math.sqrt(9)) &amp;lt;-- 3특정 자리수에서 반올림하기(round) Math.round() 함수는 매개변수의 소수점 다음의 값을 반올림 합..." }, { "title": "자바스크립트 JS 배열 메소드 정리", "url": "/posts/JS%EB%B0%B0%EC%97%B4%EB%A9%94%EC%86%8C%EB%93%9C/", "categories": "JS, 배열 메소드", "tags": "JS, 기초, 배열 메소드", "date": "2021-11-30 00:00:00 +0900", "snippet": "JS 배열 메소드 정리!! 배열 요소를 분할/변환하기(from) 배열 뒤에 요소 추가하기(push) 배열 앞에 요소 추가하기(unshift) 배열 마지막 요소 삭제하기(pop) 배열 맨 앞 요소 삭제하기(shift) 배열 길이 구하기(length) 배열 합치기(concat) 배열에 특정 구분자 넣어 문자형으로 변환하기(join) 배열 특정 위치의 요소 추출하기(slice) 배열 인덱스로 특정 요소 수정하기(splice) 배열 정렬하기(sort) 배열의 순서를 반대로 나열하기(reverse) 배열 요소가 ..." }, { "title": "자바스크립트 JS 문자열 메소드 정리", "url": "/posts/JS%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A9%94%EC%86%8C%EB%93%9C/", "categories": "JS, 문자열 메소드", "tags": "JS, 기초, 문자열 메소드", "date": "2021-11-30 00:00:00 +0900", "snippet": "JS 문자열 메소드 정리!! 문자열 양 끝의 공백 없애기(trim) 문자열 자르기(slice) 문자열 자르기(substring) 문자열 길이 구하기(length) 문자열로 변환하기(String) 문자열로 변환하기(toString) 두개의 문자열 하나로 합치기 특정 위치의 문자 반환하기(charAt) 문자열을 특정 구분자에 의해 배열로 나누기(split) 특정 문자열 위치 확인하기-1(indexOf) 특정 문자열 위치 확인하기-2(lastIndexOf) 특정 문자열 포함 여부 확인하기 문자열 대소문자 변환..." }, { "title": "자바스크립트 클로저", "url": "/posts/JS%ED%81%B4%EB%A1%9C%EC%A0%80/", "categories": "JS, 클로저", "tags": "JS, 기초문법, 클로저", "date": "2021-11-27 00:00:00 +0900", "snippet": "클로저 함수의 특징 함수를 리턴하는 함수입니다. 리턴하는 함수에 의해 스코프가 구분됩니다. 외부 함수의 변수에 접근 가능한 내부 함수 입니다.function counterClosure(){ let count = 0 return { increase : function() { count++ }, getCount : function() { return count } }}const counter1 = counterClosur..." }, { "title": "자바스크립트 var,let,const 스코프와 호이스팅", "url": "/posts/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85/", "categories": "JS, 기초문법", "tags": "JS, 기초문법, 스코프, 호이스팅", "date": "2021-11-25 00:00:00 +0900", "snippet": "JS var,let,const 스코프, 호이스팅 Block-level scope 변수 중복 선언 호이스팅 var 변수 호이스팅 let 변수 호이스팅 Const const 와 객체Block-level scope대부분의 프로그래밍 언어는 Block-level scope를 따릅니다. 하지만 자바스크립트는 Function-level scope 를 따릅니다.함수 레벨 스코프(Function-level scope)함수 내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서는 참조할 수 없다. 즉, 함수 내부에서 선언한 변..." }, { "title": "자바스크립트 객체", "url": "/posts/%EA%B0%9D%EC%B2%B4/", "categories": "JS, 객체, 기초문법", "tags": "JS", "date": "2021-11-25 00:00:00 +0900", "snippet": "객체 객체 기초 - 1 객체 기초 - 2객체 기초 - 1 여러개의 값을 한번에 접근할 수 있도록 자바스크립트는 객체(Object)를 제공하고 있습니다. 객체는 값들을 그룹으로 묶은 데이터 모음입니다. 객체를 만드는 방법은 중괄호{}를 사용하면 됩니다. 중괄호 안에 여러 값들을 넣을 수 있는데 키, 값을 한쌍으로 정의하여 속성(Properties)라고 부릅니다.let family = { addresss : &#39;Seoul&#39;, members : {}, addFamily : function(ag..." }, { "title": "자바스크립트 조건문", "url": "/posts/JS%EC%A1%B0%EA%B1%B4%EB%AC%B8/", "categories": "JS, 조건문, 기초문법", "tags": "JS, 조건문, 기초문법", "date": "2021-11-25 00:00:00 +0900", "snippet": "조건문 if 조건문 switch 조건문if 조건문조건문은 주어진 조건식의 결과에 따라 코드 블럭의 실행을 결정 합니다.if(조건식){ // 조건식이 참이면 이 코드 블럭이 실행 됩니다.}else{ // 조건식이 거짓이면 이 코드 블럭이 실행 됩니다.}조건식을 추가 하고 싶으면 else if문을 사용합니다.if(조건식1){ // 조건식1이 참이면 이 코드 블럭이 실행 됩니다.}else if(조건식2){ // 조건식2이 참이면 이 코드 블럭이 실행 됩니다.}else{ // 조건식1, 조건식2가 거짓이..." }, { "title": "자바스크립트 반복문", "url": "/posts/JS%EB%B0%98%EB%B3%B5%EB%AC%B8/", "categories": "JS, 반복문, 기초문법", "tags": "JS, 반복문, 기초문법", "date": "2021-11-25 00:00:00 +0900", "snippet": "반복문 FOR 문 while 문 break와 continue do..while 문FOR 문반복문은 주어진 조건식의 평가 결과가 참인 경우 코드 블럭이 실행 됩니다.그 후 조건식을 다시 탐색하여 참인 경우 코드 블럭을 다시 실행이 되며.조건식이 거짓일 때 까지 반복이 됩니다.for(초기값; 조건문, 증감문){ 조건식의 결과가 참인 경우 반복적으로 실행 되는 문;}for(let = 1; i &amp;lt;= 3; i++){ // 조건식의 결과가 참인 경우 반복적으로 실행 되는 문; ..." }, { "title": "자바스크립트 기초문법", "url": "/posts/JS%EA%B8%B0%EC%B4%88/", "categories": "JS, 기술면접, 기초문법", "tags": "JS", "date": "2021-11-25 00:00:00 +0900", "snippet": "변수 변수 타입 기초변수변수(Variable)는 값(value)를 할당하고 저장된 값을 참조하기 위해 사용합니다.let x ; // 변수의 선언x = 1; // 값을 할당타입 기초 용어 의미 데이터 타입(Data Type) 프로그래밍 언어에서 사용할 수 있는 값의 종류 변수 값이 저장된 메모리 공간의 주소를 알려주는 식별자 리터럴(literal) 변수에 넣는 변하지 않는 데이터를 의미하는 것..." }, { "title": "for...in, for...of", "url": "/posts/For/in-For/of/", "categories": "JS, 반복문, for...in, for...of", "tags": "for...in, for...of", "date": "2021-11-24 00:00:00 +0900", "snippet": "for…in, for…of for…in for…of for…in VS for…offor…in 객체의 열거 가능한 속성들을 순회 할 수 있도록 합니다. 객체의 key 값에 접근이 가능하나 value 값에는 직접 접근 불가합니다. 모든 객체에서 사용이 가능 합니다.for …in 문을 사용해 배열과 객체의 요소에 접근하는 예제key 값에서만 접근이 가능하기 때문에 배열에서는 index에 객체에서는 key 값에 접근하게 됩니다.value 값이 궁금하면 arr[i], obj[key]와 같이 key를 이용하는 방식을 사용해 간..." }, { "title": "자바스크립트 기술면접 - 1", "url": "/posts/JS-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91/", "categories": "JS, 기술면접", "tags": "기술면접", "date": "2021-11-24 00:00:00 +0900", "snippet": "기술면접 prototype 기반 상속은 어떻게 하는지 설명해주세요 Null과 undefined의 차이점을 설명해 주세요 event loop를 설명해 주세요 forEach와 map 차이점과 어떤 메소드를 사용해야 하는가? 이벤트 버블링, 이벤트 캡처링prototype 기반 상속은 어떻게 하는지 설명해주세요자바스크립트 객체에는 Prototype이라는 내부 프로퍼티가 있고, 이는 다른 객체를 참조할 때 사용합니다. 자바스크립트에서 상속을 진행할 때는 프로토타입끼리 연결을 하는데, 부모 프로토타입을 create()나 setP..." }, { "title": "OSI 7계층 정리", "url": "/posts/%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91/", "categories": "기술면접, OSI", "tags": "기술면접", "date": "2021-11-23 00:00:00 +0900", "snippet": "Contents OSI 7계층 개념!!OSI 7계층 개념!!OSI 7 계층은 네트워크에서 통신이 일어나는 과정을 7단계로 나눈 것을 말한다.  7 계층(응용 계층): 사용자와 직접 상호작용하는 응용 프로그램들이 포함된 계층최종 목적지로서 HTTP, FTP, SMTP, POP3, IMAP, Telnet 등과 같은 프로토콜이 있다. 6 계층(표현 계층): 데이터의 형식(Format)을 정의하는 계층해당 계층은 데이터 표현이 상이한 응용 프로세스의 독립성을 제공하고, 암호화 한다. 5 계층(세션 계층): 컴퓨터끼리 통신을 하..." }, { "title": "HTTP 와 HTTPS의 차이", "url": "/posts/%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91-1/", "categories": "기술면접, HTTP, HTTPS", "tags": "기술면접", "date": "2021-11-23 00:00:00 +0900", "snippet": "HTTP와 HTTPS 차이점 HTTP 란? HTTPS 란? HTTP와 HTTPS의 차이점! HTTPS의 인증서는 어떻게 보안을 하나요? 세션과 토큰 차이HTTP 란?HTTP(HyperText Transfer Protocol)는 인터넷에서 웹 서버와 사용자의 인터넷 웹 브라우저 사이에 문서를 전송하기 위한 통신 규약입니다.포트 번호는 80번을 사용하고 있습니다. HTTP는 단순 텍스트를 주고 받기 때문에 네트워크에서 전송 신호를 가로챌 수 있는 경우 원하지 않는 데이터 유출이 발생 할 수도 있습니다.HTTPS 란?HTT..." }, { "title": "타입스크립트 기초문법", "url": "/posts/TS-%EA%B8%B0%EC%B4%881/", "categories": "TS, 기초문법", "tags": "TS, 기초문법", "date": "2021-11-23 00:00:00 +0900", "snippet": "기본 타입 Boolean 숫자형(Number) 문자열(String) 배열(Array) 튜플(Tuple) Null과 UndefinedBooleanlet isTrue : boolean = true;let isFalse : booean = false;숫자형(Number)TypeScript는 10진수, 16진수와 함께 자바스크립트와 마찬가지로 2진수, 8진수의 문자를 지원합니다.let integer : number = 6;let hex : number = 0xf00d;문자열(String)자바스크립트와 마찬가지로 큰 따옴표(..." }, { "title": "CSS 기초-2", "url": "/posts/CSS-2/", "categories": "CSS, 기초문법", "tags": "style태그", "date": "2021-11-23 00:00:00 +0900", "snippet": "CSS 속성들 font box-model width height padding border margin display Flexbox flex-direction flex-wrap justfy-content align-content align-items order flex-growfont페이지에서 사용할 폰트의 종류를 외부에서 받아올 수 있으며 부문 마다 폰트를 사용할 수 있다. font와 관련된 속성은 font-size, font-wegiht, text-align 등이 있습니다.box-model ..." }, { "title": "CSS 기초-1 셀렉터", "url": "/posts/CSS-1/", "categories": "CSS, 기초문법", "tags": "셀렉터", "date": "2021-11-23 00:00:00 +0900", "snippet": "CSS 셀렉터 1.전체 셀렉터 2.태그 셀렉터 3.ID 셀렉터 4.클래스 셀렉터 5.후손 셀렉터 6.자식 셀렉터 7.인접 형제 셀렉터 8.일반 형제 셀렉터1.전체 셀렉터 구문 설명 * HTML 요소를 포함한 모든 요소를 선택 합니다. * { color: red;}2.태그 셀렉터 구문 설명 태그명 지정된 태그명을 가지는 요소를 선택합니다. p { color: ..." }, { "title": "자료구조 Queue, Stack", "url": "/posts/Queue,Stack/", "categories": "자료구조", "tags": "자료구조, 큐, 스택", "date": "2021-01-24 00:00:00 +0900", "snippet": "자료구조 Queue, Stack Stack 자바스크립트에서 예시 Queue 자바스크립트에서의 예시 Stack 스택은 쌓다, 쌓이다 라는 뜻을 가지고 있습니다. 자료구조에서 스택은 말 그대로 아래서부터 위로 쌇는 구조라고 생각하면 됩니다. 맨 마지막에 쌓인 자료를 먼저 가져오는 형태를 띄우고 있습니다.자바스크립트에서 예시const stack = [];stack.push(1); // [1]stack.push(2); // [1, 2]stack.push(3); // [1, 2,..." } ]
